#+title: Emacs Configuration
#+author: Ahnaf Rafi
#+property: header-args:emacs-lisp  :tangle init.el
#+startup: overview

* How this configuration works.

Emacs Lisp (~elisp~) source code blocks in this file, ~init.org~, get
written (or tangled in ~org~-speak) to ~early-init.el~ or ~init.el~ when
~init.org~ is changed and saved.
These source files are symlinked to ~~/.emacs.d~, where Emacs looks for user
configuration files.
See the ~makefile~ in the directory containing ~init.org~.
Running ~make~ from the command line does all the necessary symlinking work.
The automatic tangling is done using a local hook;
the end of ~init.org~ has the following comment block:
#+begin_src org :tangle no
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
#+end_src
If you are viewing ~init.org~ on GitHub, the comment is visible at the bottom of
the raw file.

* The early init file

Every code block in this section gets tangled to the ~early-init.el~ file.
The ~early-init.el~ file is the first user file that Emacs loads, and does so
before Emacs loads its graphical user interface (GUI).
I use ~early-init.el~ mainly to disable some GUI elements before they are loaded
and defer things like garbage collection.
Comments in the source block explain the code.
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- -*- lexical-binding: t; -*-

;;; Code:

;; Disable GUI elements I don't use.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Get rid of splash screen.
(setq inhibit-splash-screen t)
(setq inhibit-startup-echo-area-message user-login-name) ;; Read docstring.
(setq inhibit-startup-screen t)
(setq inhibit-startup-buffer-menu nil)
(setq initial-scratch-message nil)
(advice-add #'display-startup-echo-area-message :override #'ignore)

;; Increase garbage collection threshold - has some performance benefit.
(setq gc-cons-threshold (* 50 1024 1024)) ;; 50mb

;; Useful for dealing with language servers using eglot.
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; Inhibit frame resize - has some performance benefit.
(setq frame-inhibit-implied-resize t)

;; Use y/n responses to yes/no prompts.
(fset 'yes-or-no-p 'y-or-n-p)

;; Suppress annoying native compilation warnings.
(setq native-comp-async-report-warnings-errors nil)

;; Set driver options for native compilation if using MacOS.
(when (eq system-type 'darwin)
  (setq native-comp-driver-options '("-Wl,-w")))

(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Main init file: header and some basics

Henceforth, any tangled ~elisp~ code blocks goes into ~init.el~.
When a block is not tangled, I will say so.
Here are the first few lines of ~init.el~.
#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t; -*-

;;; Code:

;; Name and email.
(setq user-full-name "Ahnaf Rafi")
(setq user-mail-address "ahnaf.al.rafi@gmail.com")

;; Set file for custom.el to use --- I use this for temporary customizations.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; Load the custom file.
(load custom-file 'noerror 'nomessage)

;; Add user lisp directory to load path.
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

* Package management

I use the built-in package manager, ~package.el~.
The following block adds the MELPA URL to ~package-archives~,
which is where many of the I use come from.
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(unless package-archive-contents
  (package-refresh-contents))
#+end_src

I use [[https://github.com/jwiegley/use-package][~use-package~]] for installing
and managing package configuration.
In recent Emacs versions (>= 29), ~use-package~ is included by default.
This block makes sure ~use-package~ gets installed if it is missing.
#+begin_src emacs-lisp
;; Install use-package if not present.
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

~use-package~ can install missing packages for you, but will not do so by
default.
The following block makes installation of missing packages default behavior.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

* TEMP STUFF
#+begin_src elisp
;; Clipboard/kill-ring --- do not keep duplicates.
(setq kill-do-not-save-duplicates t)

;; Disable the alarm bell
(setq ring-bell-function 'ignore)

;; For mouse events
(setq use-dialog-box nil)
(setq use-file-dialog nil)

;; Disable backups and lockfiles
(setq make-backup-files nil)
(setq create-lockfiles nil)

;; Enable auto-saves
(setq auto-save-default t)

;; Auto-save transforms
(setq auto-save-file-name-transforms
      (list (list "\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'"
                  ; Prefix tramp auto-saves to prevent conflicts
                  (concat auto-save-list-file-prefix "tramp-\\2") t)
            (list ".*" auto-save-list-file-prefix t)))
#+end_src

* Footer for init file

#+BEGIN_SRC emacs-lisp :tangle no
(provide 'init)
;;; init.el ends here
#+END_SRC

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
